import org.jooq.codegen.GenerationTool

buildscript {
    ext {
        auth0_jwt_version = "3.10.0"
        bcrypt_version = "0.9.0"
        hikaricp_version = "3.4.1"
        jackson_version = "2.10.2"
        javalin_version = "3.7.0"
        jdbi_version = "3.10.1"
        jooq_version = "3.12.1"
        junit_version = "5.5.1"
        koin_version = "2.0.1"
        kotlin_version = "1.3.70"
        liquibase_version = "3.6.1"
        logback_version = "1.2.3"
        mockk_version = "1.9.3"
        postgres_driver_version = "42.2.6"
        rest_assured_version = "4.1.2"
        slugify_version = "2.4"
        spring_jdbc_version = "5.2.4.RELEASE"
        testcontainers_postgresql_version = "1.12.1"
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jooq:jooq-codegen:$jooq_version"
        classpath "org.postgresql:postgresql:$postgres_driver_version"
    }
}

plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.3.70'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'org.jlleitschuh.gradle.ktlint' version '9.2.1'
}

group 'io.realworld'
version '1.0-SNAPSHOT'

mainClassName = 'io.realworld.conduit.AppKt'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "at.favre.lib:bcrypt:$bcrypt_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "com.auth0:java-jwt:$auth0_jwt_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.zaxxer:HikariCP:$hikaricp_version"
    implementation "io.javalin:javalin:$javalin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jooq:jooq:$jooq_version"
    implementation "org.koin:koin-core:$koin_version"
    implementation "org.postgresql:postgresql:$postgres_driver_version"
    implementation "com.github.slugify:slugify:$slugify_version"
    implementation "org.springframework:spring-jdbc:$spring_jdbc_version"

    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "io.rest-assured:rest-assured:$rest_assured_version"
    testImplementation "io.rest-assured:kotlin-extensions:$rest_assured_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
    testImplementation "org.testcontainers:postgresql:$testcontainers_postgresql_version"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_version"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    manifest { attributes 'Main-Class': mainClassName }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs += "src/main/generated/java"
        }
    }
}

// read from application.properties only when it exists
// environment variables take precedence
def applicationProps = new Properties()
def appFile = file("src/main/resources/application.properties")
if (appFile.exists()) {
    applicationProps.load(appFile.newInputStream())
}
def env = System.getenv()
def props = applicationProps + env


task jooqxml() {
    group = "Jooq"
    description = "Generate jooq xml schema from database"

    doLast {
        def config = file("$projectDir/src/main/resources/db/jooq/jooq-meta.xml")
                .text
                .replace("%project_dir%", projectDir.toString())
                .replace("%db_url%", props["DB_URL"].toString())
                .replace("%db_user%", props["DB_USER"].toString())
                .replace("%db_password%", props["DB_PASSWORD"].toString())

        GenerationTool.generate(config)
    }
}

task jooq() {
    group = "Jooq"
    description = "Generate jooq classes from the xml schema generated from the jooqxml task"

    doLast {
        def config = file("$projectDir/src/main/resources/db/jooq/jooq.xml")
                .text.replace("%project_dir%", projectDir.toString())
        GenerationTool.generate(config)
    }
}
